package com.example.octane.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PreDestroy;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.*;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

@Component
public class OctaneRestClient {

    private CloseableHttpClient httpClient;
    private CookieStore cookieStore;
    private HttpClientContext context;
    private String lwssoCookieKey;

    public void initialize(String baseUrl, String clientId, String clientSecret, String proxyHost, int proxyPort) {
        try {
            this.cookieStore = new BasicCookieStore();
            this.context = HttpClientContext.create();
            this.context.setCookieStore(cookieStore);

            HttpHost proxy = new HttpHost(proxyHost, proxyPort);
            this.httpClient = HttpClientBuilder.create()
                    .setProxy(proxy)
                    .setDefaultCookieStore(cookieStore)
                    .build();

            authenticate(baseUrl, clientId, clientSecret);
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize OctaneRestClient", e);
        }
    }

    private void authenticate(String baseUrl, String clientId, String clientSecret) {
        try {
            String url = baseUrl + "/authentication/sign_in";
            HttpPost post = new HttpPost(url);
            post.setHeader("Content-Type", "application/json");

            Map<String, String> payload = new HashMap<>();
            payload.put("client_id", clientId);
            payload.put("client_secret", clientSecret);

            StringEntity entity = new StringEntity(new ObjectMapper().writeValueAsString(payload));
            post.setEntity(entity);

            HttpResponse response = httpClient.execute(post, context);
            int statusCode = response.getStatusLine().getStatusCode();

            if (statusCode == 200) {
                for (Cookie cookie : cookieStore.getCookies()) {
                    if ("LWSSO_COOKIE_KEY".equals(cookie.getName())) {
                        lwssoCookieKey = cookie.getValue();
                        return;
                    }
                }
                throw new RuntimeException("LWSSO_COOKIE_KEY not found after authentication");
            } else {
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
                StringBuilder responseBody = new StringBuilder();
                reader.lines().forEach(line -> responseBody.append(line).append("\n"));
                throw new RuntimeException("Authentication failed: " + statusCode + "\n" + responseBody);
            }

        } catch (Exception e) {
            throw new RuntimeException("Authentication to Octane failed", e);
        }
    }

    public String getLwssoCookieKey() {
        return lwssoCookieKey;
    }

    public CloseableHttpClient getHttpClient() {
        return httpClient;
    }

    public HttpClientContext getContext() {
        return context;
    }

    @PreDestroy
    public void close() {
        try {
            if (httpClient != null) httpClient.close();
        } catch (Exception ignored) {
        }
    }
}
----------
package com.example.octane.service;

import com.example.octane.client.OctaneRestClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class OctaneRestService {

    private final OctaneRestClient restClient;

    @Autowired
    public OctaneRestService(OctaneRestClient restClient) {
        this.restClient = restClient;
    }

    public void connectToOctane(String baseUrl, String clientId, String clientSecret) {
        // Optional: externalize these values from application.properties or vault
        String proxyHost = "proxy.company.com";
        int proxyPort = 8080;

        restClient.initialize(baseUrl, clientId, clientSecret, proxyHost, proxyPort);

        String cookie = restClient.getLwssoCookieKey();
        System.out.println("Authenticated with Octane. LWSSO_COOKIE_KEY: " + cookie);
    }
}

