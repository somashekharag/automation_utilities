package com.example.octane;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.cookie.ClientCookie;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class OctaneRestClient {

    private final String baseUrl;
    private final String clientId;
    private final String clientSecret;
    private final CloseableHttpClient httpClient;
    private final CookieStore cookieStore;
    private final HttpClientContext context;

    public OctaneRestClient(String baseUrl, String clientId, String clientSecret) {
        this.baseUrl = baseUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.cookieStore = new BasicCookieStore();
        this.context = HttpClientContext.create();
        this.context.setCookieStore(cookieStore);
        this.httpClient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();
    }

    public boolean authenticate() {
        try {
            String url = baseUrl + "/authentication/sign_in";
            HttpPost post = new HttpPost(url);
            post.setHeader("Content-Type", "application/json");

            Map<String, String> authPayload = new HashMap<>();
            authPayload.put("client_id", clientId);
            authPayload.put("client_secret", clientSecret);

            ObjectMapper mapper = new ObjectMapper();
            StringEntity entity = new StringEntity(mapper.writeValueAsString(authPayload));
            post.setEntity(entity);

            HttpResponse response = httpClient.execute(post, context);
            int statusCode = response.getStatusLine().getStatusCode();

            if (statusCode == 200) {
                for (Cookie cookie : cookieStore.getCookies()) {
                    if ("LWSSO_COOKIE_KEY".equals(cookie.getName())) {
                        System.out.println("Authenticated successfully. LWSSO_COOKIE_KEY: " + cookie.getValue());
                        return true;
                    }
                }
            } else {
                System.err.println("Authentication failed. Status code: " + statusCode);
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
                reader.lines().forEach(System.out::println);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }

    public String getCookie(String name) {
        return cookieStore.getCookies().stream()
                .filter(cookie -> cookie.getName().equals(name))
                .map(Cookie::getValue)
                .findFirst()
                .orElse(null);
    }

    public CookieStore getCookieStore() {
        return cookieStore;
    }

    public HttpClientContext getContext() {
        return context;
    }

    public CloseableHttpClient getHttpClient() {
        return httpClient;
    }
}

---------
public class OctaneTest {
    public static void main(String[] args) {
        String baseUrl = "http://octane-server.company.com"; // No port if default
        String clientId = "your-client-id";
        String clientSecret = "your-client-secret";

        OctaneRestClient client = new OctaneRestClient(baseUrl, clientId, clientSecret);
        if (client.authenticate()) {
            String lwsso = client.getCookie("LWSSO_COOKIE_KEY");
            System.out.println("Session cookie: " + lwsso);
        }
    }
}

