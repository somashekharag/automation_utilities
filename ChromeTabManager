import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;

public class ChromeTabManager {

    private static final String CHROME_DEBUG_URL = "http://localhost:9222/json";
    private static final String RUNNER_URL = "http://localhost:8080/runner";
    private static final String USER_DATA_DIR =
            System.getProperty("java.io.tmpdir") + File.separator + "ChromeDevSession";

    public static void openOrRefreshRunner() throws Exception {
        if (!isChromeDebugRunning()) {
            startChromeDebug();
            waitForDebugPort();
        }

        ObjectMapper mapper = new ObjectMapper();
        JsonNode tabs = mapper.readTree(new URL(CHROME_DEBUG_URL));

        String wsUrl = null;

        // Find existing runner tab
        for (JsonNode tab : tabs) {
            String url = tab.get("url").asText();
            if (url.startsWith(RUNNER_URL)) {
                wsUrl = tab.get("webSocketDebuggerUrl").asText();
                break;
            }
        }

        if (wsUrl != null) {
            // Refresh and bring to front
            sendDevToolsCommand(wsUrl, "{\"id\":1,\"method\":\"Page.reload\"}");
            sendDevToolsCommand(wsUrl, "{\"id\":2,\"method\":\"Page.bringToFront\"}");
        } else {
            openNewTab(RUNNER_URL);
        }
    }

    private static boolean isChromeDebugRunning() {
        try {
            new URL(CHROME_DEBUG_URL).openStream().close();
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    private static void waitForDebugPort() throws InterruptedException {
        long start = System.currentTimeMillis();
        while (!isChromeDebugRunning()) {
            if (System.currentTimeMillis() - start > 15000) {
                throw new RuntimeException("Chrome debug mode did not start within 15 seconds.");
            }
            Thread.sleep(500);
        }
    }

    private static void startChromeDebug() throws IOException {
        String chromePath = detectChromePath();
        if (chromePath == null) {
            throw new RuntimeException("Chrome executable not found.");
        }

        String cmd;
        if (isWindows()) {
            cmd = String.format(
                    "cmd /c start \"\" \"%s\" --remote-debugging-port=9222 --user-data-dir=\"%s\" --new-window",
                    chromePath, USER_DATA_DIR
            );
        } else {
            cmd = String.format(
                    "%s --remote-debugging-port=9222 --user-data-dir=\"%s\" --new-window &",
                    chromePath, USER_DATA_DIR
            );
        }

        Runtime.getRuntime().exec(cmd);
    }

    private static void openNewTab(String url) throws IOException {
        try {
            sendHttpToChrome("/new?" + url, "POST");
        } catch (IOException e) {
            // Try PUT for older Chrome versions
            sendHttpToChrome("/new?" + url, "PUT");
        }
    }

    private static void sendHttpToChrome(String path, String method) throws IOException {
        URL endpoint = new URL(CHROME_DEBUG_URL + path);
        HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);
        conn.getInputStream().close();
    }

    private static void sendDevToolsCommand(String wsUrl, String message) throws Exception {
        WebSocketClient client = new WebSocketClient(new URI(wsUrl)) {
            @Override
            public void onOpen(ServerHandshake handsh) {
                send(message);
                close();
            }
            @Override public void onMessage(String msg) {}
            @Override public void onClose(int code, String reason, boolean remote) {}
            @Override public void onError(Exception ex) { ex.printStackTrace(); }
        };
        client.connectBlocking();
    }

    private static boolean isWindows() {
        return System.getProperty("os.name").toLowerCase().contains("win");
    }

    private static boolean isMac() {
        return System.getProperty("os.name").toLowerCase().contains("mac");
    }

    private static String detectChromePath() {
        if (isWindows()) {
            String[] paths = {
                    System.getenv("ProgramFiles") + "\\Google\\Chrome\\Application\\chrome.exe",
                    System.getenv("ProgramFiles(x86)") + "\\Google\\Chrome\\Application\\chrome.exe",
                    System.getenv("LocalAppData") + "\\Google\\Chrome\\Application\\chrome.exe"
            };
            for (String path : paths) {
                if (path != null && new File(path).exists()) return path;
            }
        } else if (isMac()) {
            String path = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome";
            if (new File(path).exists()) return path;
        } else { // Linux
            String[] commands = {"/usr/bin/google-chrome", "/usr/bin/chromium-browser", "/snap/bin/chromium"};
            for (String path : commands) {
                if (new File(path).exists()) return path;
            }
        }
        return null;
    }
}

----
<dependency>
    <groupId>org.java-websocket</groupId>
    <artifactId>Java-WebSocket</artifactId>
    <version>1.5.6</version>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.17.0</version>
</dependency>
-------'
import jakarta.annotation.PostConstruct;

@SpringBootApplication
public class ItafApplication {

    public static void main(String[] args) {
        SpringApplication.run(ItafApplication.class, args);
    }

    @PostConstruct
    public void openRunnerTab() {
        try {
            ChromeTabManager.openOrRefreshRunner();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
