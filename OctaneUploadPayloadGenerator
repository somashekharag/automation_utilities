package com.itaf.automation.reporting;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import io.cucumber.java.Scenario;

import java.io.File;
import java.util.Collection;
import java.util.Optional;

public class CustomXmlReportGenerator {

    private static Document document;
    private static Element testRunsElement;

    // Static block initializes XML skeleton
    static {
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            document = docBuilder.newDocument();

            // root <test_result>
            Element rootElement = document.createElement("test_result");
            document.appendChild(rootElement);

            // child <test_runs>
            testRunsElement = document.createElement("test_runs");
            rootElement.appendChild(testRunsElement);

        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize XML report generator", e);
        }
    }

    /**
     * Thread-safe method to add a scenario entry into the XML
     */
    public static synchronized void addScenario(Scenario scenario, long durationMs) {
        try {
            // ---- Attributes ----
            String module = extractModule(scenario.getSourceTagNames());
            String scenarioName = scenario.getName();
            String className = module;
            String status = scenario.isFailed() ? "Failed" : "Passed";
            String started = String.valueOf(System.currentTimeMillis());

            // <test_run>
            Element testRun = document.createElement("test_run");
            testRun.setAttribute("module", "/" + module);
            testRun.setAttribute("package", "com.itaf.automation");
            testRun.setAttribute("class", className);
            testRun.setAttribute("name", scenarioName);
            testRun.setAttribute("duration", String.valueOf(durationMs / 1000)); // in seconds
            testRun.setAttribute("status", status);
            testRun.setAttribute("started", started);

            // ---- Release ----
            String releaseName = System.getenv("RELEASE_NAME");
            if (releaseName != null && releaseName.matches("\\d+")) {
                Element releaseRef = document.createElement("release_ref");
                releaseRef.setAttribute("id", releaseName);
                testRun.appendChild(releaseRef);
            } else if (releaseName != null) {
                Element release = document.createElement("release");
                release.setAttribute("name", releaseName);
                testRun.appendChild(release);
            }

            // ---- Backlog Items ----
            Element backlogItems = document.createElement("backlog_items");
            for (String tag : scenario.getSourceTagNames()) {
                if (tag.startsWith("@octane_story_")) {
                    String storyId = tag.replace("@octane_story_", "");
                    Element backlogItem = document.createElement("backlog_item_ref");
                    backlogItem.setAttribute("id", storyId);
                    backlogItems.appendChild(backlogItem);
                }
            }
            testRun.appendChild(backlogItems);

            // ---- Product Areas ----
            Element productAreas = document.createElement("product_areas");
            String octaneModule = System.getenv("OCTANE_MODULE");
            if (octaneModule != null) {
                Element productArea = document.createElement("product_area_ref");
                productArea.setAttribute("id", octaneModule);
                productAreas.appendChild(productArea);
            }
            testRun.appendChild(productAreas);

            // ---- Test Fields ----
            Element testFields = document.createElement("test_fields");
            addTestField(testFields, "Test_Type", System.getenv("TEST_TYPE"));
            addTestField(testFields, "Testing_Tool_Type", System.getenv("TESTING_TOOL_TYPE"));
            addTestField(testFields, "Framework", System.getenv("FRAMEWORK"));
            testRun.appendChild(testFields);

            // ---- Environment ----
            Element environment = document.createElement("environment");
            addTaxonomy(environment, "OS", System.getenv("OS"));
            addTaxonomy(environment, "AUT Env", System.getenv("AUT_ENV"));
            testRun.appendChild(environment);

            // append to <test_runs>
            testRunsElement.appendChild(testRun);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void addTestField(Element parent, String type, String value) {
        if (value != null && !value.isBlank()) {
            Element testField = document.createElement("test_field");
            testField.setAttribute("type", type);
            testField.setAttribute("value", value);
            parent.appendChild(testField);
        }
    }

    private static void addTaxonomy(Element parent, String type, String value) {
        if (value != null && !value.isBlank()) {
            Element taxonomy = document.createElement("taxonomy");
            taxonomy.setAttribute("type", type);
            taxonomy.setAttribute("value", value);
            parent.appendChild(taxonomy);
        }
    }

    private static String extractModule(Collection<String> tags) {
        Optional<String> moduleTag = tags.stream()
                .filter(t -> t.startsWith("@module_"))
                .findFirst();
        return moduleTag.map(tag -> tag.replace("@module_", "")).orElse("defaultModule");
    }

    /**
     * Call this once at the end of the suite
     */
    public static void writeXmlReport(String outputPath) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

            DOMSource source = new DOMSource(document);
            StreamResult result = new StreamResult(new File(outputPath));
            transformer.transform(source, result);

            System.out.println("âœ… Custom XML report generated at: " + outputPath);
        } catch (Exception e) {
            throw new RuntimeException("Failed to write XML report", e);
        }
    }
}


---------------------------------------

package com.itaf.automation.hooks;

import com.itaf.automation.reporting.CustomXmlReportGenerator;
import io.cucumber.java.*;

public class Hooks {

    private long startTime;

    @Before
    public void beforeScenario(Scenario scenario) {
        startTime = System.currentTimeMillis();
    }

    @After
    public void afterScenario(Scenario scenario) {
        long duration = System.currentTimeMillis() - startTime;
        CustomXmlReportGenerator.addScenario(scenario, duration);
    }

    @AfterAll
    public static void afterAll() {
        CustomXmlReportGenerator.writeXmlReport("target/custom-report.xml");
    }
}
