package com.yourcompany.trc;

import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.*;

@Component
public class TrcUploader {

    private static final String CONFIG_FILE = "trc-config.properties";
    private static final String CONFIG_COPY_PATH = "trc-cache/config.properties";

    @EventListener(ApplicationReadyEvent.class)
    public void uploadResults() {
        try {
            Path jarPath = downloadAndCacheJar(
                "https://your-nexus-url/repository/tools/trc-client-standalone.jar",
                "trc-cache/trc-client-standalone.jar"
            );

            // Copy config to a physical file (since we can't directly pass resources from classpath)
            Path configPath = copyConfigToDisk(CONFIG_FILE, CONFIG_COPY_PATH);

            ProcessBuilder builder = new ProcessBuilder(
                "java", "-jar", jarPath.toString(),
                "-c", configPath.toString()
            );

            builder.inheritIO(); // show logs in console
            Process process = builder.start();
            int exitCode = process.waitFor();
            System.out.println("TRC upload finished with exit code: " + exitCode);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Path downloadAndCacheJar(String jarUrl, String localPath) throws IOException {
        Path cachedPath = Paths.get(localPath).toAbsolutePath();
        if (Files.exists(cachedPath)) {
            System.out.println("TRC JAR already cached at: " + cachedPath);
            return cachedPath;
        }

        Files.createDirectories(cachedPath.getParent());
        System.out.println("Downloading TRC JAR from: " + jarUrl);

        HttpURLConnection conn = (HttpURLConnection) new URL(jarUrl).openConnection();
        conn.setRequestMethod("GET");

        try (InputStream in = conn.getInputStream();
             FileOutputStream out = new FileOutputStream(cachedPath.toFile())) {
            in.transferTo(out);
        }

        System.out.println("TRC JAR downloaded to: " + cachedPath);
        return cachedPath;
    }

    private Path copyConfigToDisk(String classpathFile, String targetPath) throws IOException {
        Path configPath = Paths.get(targetPath).toAbsolutePath();
        Files.createDirectories(configPath.getParent());

        try (InputStream in = getClass().getClassLoader().getResourceAsStream(classpathFile)) {
            if (in == null) throw new FileNotFoundException("Could not find " + classpathFile);
            Files.copy(in, configPath, StandardCopyOption.REPLACE_EXISTING);
        }

        return configPath;
    }
}




------------------------------

trc.jar.url=https://your-nexus-url/repository/tools/trc-client-standalone.jar
trc.jar.local.path=trc-cache/trc-client-standalone.jar

server=https://your-octane-url
sharedspace=1001
workspace=2002
client-id=your-client-id
client-secret=your-client-secret
results-file=target/cucumber-report/cucumber.json
format=cucumber
