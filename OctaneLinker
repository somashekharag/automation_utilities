
import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import java.util.*;

import static io.restassured.RestAssured.given;

public class OctaneLinkerRestAssured {

    private final String baseUrl;
    private final String sharedSpaceId;
    private final String workspaceId;
    private final String lwSsoCookieKey;

    public OctaneLinkerRestAssured(String baseUrl, String sharedSpaceId, String workspaceId, String lwSsoCookieKey) {
        this.baseUrl = baseUrl;
        this.sharedSpaceId = sharedSpaceId;
        this.workspaceId = workspaceId;
        this.lwSsoCookieKey = lwSsoCookieKey;

        // Configure RestAssured base settings
        RestAssured.baseURI = baseUrl;
    }

    public void linkManualToAutomated(Map<String, List<String>> mapping) {
        mapping.forEach((manualId, automatedIds) -> {
            try {
                // Build payload
                Map<String, Object> payload = new HashMap<>();
                List<Map<String, String>> autoTests = new ArrayList<>();

                for (String autoId : automatedIds) {
                    autoTests.add(Map.of("id", autoId, "type", "test"));
                }

                payload.put("covering_automated_test", Map.of("data", autoTests));

                // Endpoint for this manual test
                String endpoint = String.format(
                        "/api/shared_spaces/%s/workspaces/%s/manual_tests/%s",
                        sharedSpaceId, workspaceId, manualId
                );

                var response = given()
                        .contentType(ContentType.JSON)
                        .cookie("LWSSO_COOKIE_KEY", lwSsoCookieKey)
                        .body(payload)
                        .when()
                        .put(endpoint)
                        .then()
                        .log().all()
                        .extract()
                        .response();

                System.out.println("Linked Manual Test " + manualId + " with Automated Tests " + automatedIds);
                System.out.println("Response Status: " + response.statusCode());

            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public static void main(String[] args) {
        String baseUrl = "https://your.octane.server";
        String sharedSpaceId = "1001";
        String workspaceId = "2002";
        String lwSsoCookieKey = "your_auth_token";

        OctaneLinkerRestAssured linker = new OctaneLinkerRestAssured(baseUrl, sharedSpaceId, workspaceId, lwSsoCookieKey);

        Map<String, List<String>> result = new HashMap<>();
        result.put("123456", Arrays.asList("1001", "1002"));
        result.put("987654", Collections.singletonList("1003"));

        linker.linkManualToAutomated(result);
    }
}
