import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.regex.Pattern;

public class PDFUtils {

    /**
     * Extracts text content from a PDF file.
     */
    public static String extractTextFromPDF(String filePath) throws IOException {
        try (PDDocument document = PDDocument.load(new File(filePath))) {
            PDFTextStripper pdfStripper = new PDFTextStripper();
            return pdfStripper.getText(document).trim();
        }
    }

    /**
     * Checks if the PDF text contains a specific string (single-line).
     */
    public static boolean containsText(String pdfText, String expectedText) {
        return pdfText.contains(expectedText);
    }

    /**
     * Checks if all expected strings are present in the PDF text.
     */
    public static boolean containsAllTexts(String pdfText, List<String> expectedTexts) {
        return expectedTexts.stream().allMatch(pdfText::contains);
    }

    /**
     * Checks if multiline content is present in the PDF text.
     */
    public static boolean containsMultilineText(String pdfText, String expectedText) {
        String normalizedPdfText = normalize(pdfText);
        String normalizedExpected = normalize(expectedText);
        return normalizedPdfText.contains(normalizedExpected);
    }

    /**
     * Checks if the PDF content matches the given regex pattern across multiple lines.
     */
    public static boolean containsRegexAcrossLines(String pdfText, String regexPattern) {
        String normalizedPdfText = normalize(pdfText);
        return Pattern.compile("(?s)" + regexPattern).matcher(normalizedPdfText).find();
    }

    /**
     * Normalizes line endings to Unix-style and trims the content.
     */
    private static String normalize(String text) {
        return text.replaceAll("\\r\\n?", "\n").trim();
    }
}
-----------------
@Given("the PDF at path {string} contains the following multiline content:")
public void validateMultilineContent(String filePath, String expectedContent) throws IOException {
    String pdfText = PDFUtils.extractTextFromPDF(filePath);
    Assert.assertTrue("Multiline content not found", PDFUtils.containsMultilineText(pdfText, expectedContent));
}

@Given("the PDF at path {string} matches the pattern:")
public void validateRegexContent(String filePath, String pattern) throws IOException {
    String pdfText = PDFUtils.extractTextFromPDF(filePath);
    Assert.assertTrue("Pattern not matched", PDFUtils.containsRegexAcrossLines(pdfText, pattern));
}
--------------
Feature: PDF Content Validation

  Scenario: Validate multiline content in PDF
    Given the PDF at path "src/test/resources/sample.pdf" contains the following multiline content:
    """
    Hello John,
    Thank you for your purchase.

    Order ID: 123456
    Date: 2025-05-19
    """
----------
Feature: PDF Content Validation

  Scenario: Validate multiline dynamic content using regex
    Given the PDF at path "src/test/resources/invoice.pdf" matches the pattern:
    """
    Hello John,\nThank you for your purchase.\n\nOrder ID: \d{6}\nDate: \d{4}-\d{2}-\d{2}
    """
-------------
Feature: PDF Content Validation

  Scenario: Validate multiple content blocks in PDF
    Given the PDF at path "src/test/resources/confirmation.pdf" contains the following multiline content:
    """
    Dear Customer,
    Your booking has been confirmed.
    """
    And the PDF at path "src/test/resources/confirmation.pdf" contains the following multiline content:
    """
    Booking ID: ABC123
    Date of Travel: 2025-06-10
    """
