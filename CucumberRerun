public static String[] prepareRerunArgs(String[] originalArgs, String rerunFilePath) {
    List<String> rerunArgs = new ArrayList<>();

    for (int i = 0; i < originalArgs.length; i++) {
        String arg = originalArgs[i];

        if ("--plugin".equals(arg) && i + 1 < originalArgs.length) {
            String pluginValue = originalArgs[i + 1];
            if (pluginValue.startsWith("rerun:")) {
                i++; // skip this plugin
                continue;
            } else {
                rerunArgs.add(arg);        // --plugin
                rerunArgs.add(pluginValue); // its value
                i++;
                continue;
            }
        }

        if (arg.startsWith("classpath:") || arg.endsWith(".feature")) {
            // skip original features path
            continue;
        }

        rerunArgs.add(arg);
    }

    // Add new feature source from rerun.txt
    rerunArgs.add("@" + rerunFilePath);

    return rerunArgs.toArray(new String[0]);
}
_________________
public int runCucumberWithRetries(String[] baseArgs, String rerunFilePath, int maxAttempts) throws IOException {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    int attempt = 1;
    int exitCode;

    String[] currentArgs = baseArgs;

    while (true) {
        System.out.println("\n▶ Attempt " + attempt + ": Running Cucumber...");
        exitCode = Main.run(currentArgs, classLoader);

        // Check if rerun is required
        Path rerunPath = Paths.get(rerunFilePath);
        boolean shouldRetry = exitCode != 0 &&
                              Files.exists(rerunPath) &&
                              Files.size(rerunPath) > 0 &&
                              attempt < maxAttempts;

        if (!shouldRetry) {
            break; // exit the loop
        }

        // Prepare rerun args using only failed scenarios
        currentArgs = prepareRerunArgs(baseArgs, rerunFilePath);
        attempt++;
    }

    System.out.println("\n✅ Final Result after " + attempt + " attempt(s): " + (exitCode == 0 ? "PASS" : "FAIL"));
    return exitCode;
}
-----------
System.out.println("🔍 exitCode = " + exitCode);
System.out.println("🔍 rerun.txt exists = " + Files.exists(rerunPath));
System.out.println("🔍 rerun.txt size   = " + (Files.exists(rerunPath) ? Files.size(rerunPath) : -1));
System.out.println("🔍 attempt           = " + attempt);
System.out.println("🔍 maxAttempts       = " + maxAttempts);

